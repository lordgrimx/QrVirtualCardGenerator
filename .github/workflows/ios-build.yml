# iOS Build ve TestFlight Deploy Pipeline
name: iOS Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  ios-build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install MAUI workload
      run: dotnet workload install maui
      
    - name: Restore dependencies
      run: dotnet restore MauiNfcReader/MauiNfcReader.csproj
      
    # iOS Certificate ve Provisioning Profile setup
    - name: Setup iOS Signing
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Temporary keychain oluştur
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Certificate'ı decode et ve keychain'e ekle
        echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Provisioning profile'ı setup et
        echo $BUILD_PROVISION_PROFILE_BASE64 | base64 --decode > build_pp.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp build_pp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
      if: env.BUILD_CERTIFICATE_BASE64 != ''
      
    - name: Build iOS app
      run: |
        if [ -n "${{ secrets.BUILD_CERTIFICATE_BASE64 }}" ]; then
          # Certificate varsa signed build
          dotnet build MauiNfcReader/MauiNfcReader.csproj \
            -f net8.0-ios \
            -c Release \
            /p:BuildIpa=true \
            /p:RuntimeIdentifier=ios-arm64 \
            /p:CodesignKey="iPhone Distribution" \
            /p:CodesignProvision="QrVirtualCard"
        else
          # Certificate yoksa unsigned build (test için)
          dotnet build MauiNfcReader/MauiNfcReader.csproj \
            -f net8.0-ios \
            -c Release \
            /p:RuntimeIdentifier=ios-arm64 \
            /p:CodeSigningKey="" \
            /p:CodesignEntitlements=""
        fi
          
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: MauiNfcReader/bin/Release/net8.0-ios/ios-arm64/*.ipa
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      
    - name: Upload unsigned build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-unsigned
        path: MauiNfcReader/bin/Release/net8.0-ios/ios-arm64/
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 == '' }}
        
    # TestFlight upload için Apple Developer hesabı gerekli
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      run: |
        # API Key dosyasını oluştur
        echo "$APP_STORE_CONNECT_API_KEY" > /tmp/api_key.p8
        
        # xcrun altool ile TestFlight'a yükle
        xcrun altool --upload-app \
          --type ios \
          --file MauiNfcReader/bin/Release/net8.0-ios/ios-arm64/*.ipa \
          --apiKey $APP_STORE_CONNECT_API_KEY_ID \
          --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
          --apiKeyFile /tmp/api_key.p8
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
