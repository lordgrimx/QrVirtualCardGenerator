using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MauiNfcApp.Services;
using System.Collections.ObjectModel;

namespace MauiNfcApp.ViewModels;

public partial class MainViewModel : ObservableObject
{
    private readonly INfcService _nfcService;
    private readonly ICryptoService _cryptoService;
    private readonly ILogger<MainViewModel> _logger;

    [ObservableProperty]
    private bool isNfcSupported;

    [ObservableProperty]
    private bool isNfcEnabled;

    [ObservableProperty]
    private bool isReading;

    [ObservableProperty]
    private string statusMessage = "NFC durumu kontrol ediliyor...";

    [ObservableProperty]
    private string? lastReadData;

    [ObservableProperty]
    private MemberData? memberData;

    [ObservableProperty]
    private bool isVerificationSuccess;

    [ObservableProperty]
    private string? errorMessage;

    [ObservableProperty]
    private ObservableCollection<NfcLogEntry> nfcLogs = new();

    public MainViewModel(INfcService nfcService, ICryptoService cryptoService, ILogger<MainViewModel> logger)
    {
        _nfcService = nfcService;
        _cryptoService = cryptoService;
        _logger = logger;

        // NFC event'lerini dinle
        _nfcService.NfcDataReceived += OnNfcDataReceived;
        _nfcService.NfcError += OnNfcError;

        // Ba≈ülangƒ±√ß durumunu kontrol et
        CheckNfcStatus();
    }

    [RelayCommand]
    private async Task StartReadingAsync()
    {
        try
        {
            if (!IsNfcSupported)
            {
                StatusMessage = "‚ùå NFC bu cihazda desteklenmiyor";
                return;
            }

            if (!IsNfcEnabled)
            {
                StatusMessage = "‚ö†Ô∏è NFC devre dƒ±≈üƒ±. L√ºtfen ayarlardan etkinle≈ütirin.";
                return;
            }

            IsReading = true;
            StatusMessage = "üì± NFC kartƒ±nƒ±zƒ± cihaza yakla≈ütƒ±rƒ±n...";
            ErrorMessage = null;

            AddLog("NFC okuma ba≈ülatƒ±ldƒ±", LogType.Info);

            var result = await _nfcService.StartReadingAsync();
            
            if (!result.Success)
            {
                StatusMessage = $"‚ùå Okuma ba≈ülatƒ±lamadƒ±: {result.ErrorMessage}";
                IsReading = false;
                AddLog($"Okuma ba≈ülatma hatasƒ±: {result.ErrorMessage}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "NFC okuma ba≈ülatma hatasƒ±");
            StatusMessage = $"‚ùå Hata: {ex.Message}";
            IsReading = false;
            AddLog($"Beklenmeyen hata: {ex.Message}", LogType.Error);
        }
    }

    [RelayCommand]
    private async Task StopReadingAsync()
    {
        try
        {
            await _nfcService.StopReadingAsync();
            IsReading = false;
            StatusMessage = "‚è∏Ô∏è NFC okuma durduruldu";
            AddLog("NFC okuma durduruldu", LogType.Info);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "NFC okuma durdurma hatasƒ±");
            AddLog($"Durdurma hatasƒ±: {ex.Message}", LogType.Error);
        }
    }

    [RelayCommand]
    private void CheckNfcStatus()
    {
        try
        {
            IsNfcSupported = _nfcService.IsNfcSupported;
            IsNfcEnabled = _nfcService.IsNfcEnabled;

            if (!IsNfcSupported)
            {
                StatusMessage = "‚ùå NFC bu cihazda desteklenmiyor";
            }
            else if (!IsNfcEnabled)
            {
                StatusMessage = "‚ö†Ô∏è NFC devre dƒ±≈üƒ±";
            }
            else
            {
                StatusMessage = "‚úÖ NFC hazƒ±r";
            }

            AddLog($"NFC durum kontrol√º: Destekleniyor={IsNfcSupported}, Etkin={IsNfcEnabled}", LogType.Info);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "NFC durum kontrol√º hatasƒ±");
            StatusMessage = $"‚ùå Durum kontrol hatasƒ±: {ex.Message}";
        }
    }

    [RelayCommand]
    private void ClearLogs()
    {
        NfcLogs.Clear();
        AddLog("Loglar temizlendi", LogType.Info);
    }

    [RelayCommand]
    private async Task VerifyLastDataAsync()
    {
        if (string.IsNullOrEmpty(LastReadData))
        {
            StatusMessage = "‚ö†Ô∏è Doƒürulanacak veri yok";
            return;
        }

        try
        {
            StatusMessage = "üîç Veri doƒürulanƒ±yor...";
            AddLog("QR kod doƒürulamasƒ± ba≈ülatƒ±ldƒ±", LogType.Info);

            var (isValid, memberData, errorMessage) = await _cryptoService.VerifyQrSignatureAsync(LastReadData);

            if (isValid && memberData != null)
            {
                IsVerificationSuccess = true;
                MemberData = memberData;
                StatusMessage = "‚úÖ Veri ba≈üarƒ±yla doƒürulandƒ±";
                ErrorMessage = null;
                AddLog($"Doƒürulama ba≈üarƒ±lƒ±: {memberData.Name}", LogType.Success);
            }
            else
            {
                IsVerificationSuccess = false;
                MemberData = null;
                StatusMessage = "‚ùå Veri doƒürulama ba≈üarƒ±sƒ±z";
                ErrorMessage = errorMessage;
                AddLog($"Doƒürulama ba≈üarƒ±sƒ±z: {errorMessage}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Veri doƒürulama hatasƒ±");
            IsVerificationSuccess = false;
            MemberData = null;
            StatusMessage = $"‚ùå Doƒürulama hatasƒ±: {ex.Message}";
            ErrorMessage = ex.Message;
            AddLog($"Doƒürulama hatasƒ±: {ex.Message}", LogType.Error);
        }
    }

    private async void OnNfcDataReceived(object? sender, NfcDataReceivedEventArgs e)
    {
        try
        {
            await MainThread.InvokeOnMainThreadAsync(() =>
            {
                LastReadData = e.ReadResult.Data;
                StatusMessage = "üìÑ Veri okundu - Doƒürulanƒ±yor...";
                AddLog($"NFC veri okundu: {e.ReadResult.Data?.Length ?? 0} karakter", LogType.Success);
            });

            // Otomatik doƒürulama
            if (!string.IsNullOrEmpty(e.ReadResult.Data))
            {
                await VerifyLastDataAsync();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "NFC veri i≈üleme hatasƒ±");
            await MainThread.InvokeOnMainThreadAsync(() =>
            {
                StatusMessage = $"‚ùå Veri i≈üleme hatasƒ±: {ex.Message}";
                AddLog($"Veri i≈üleme hatasƒ±: {ex.Message}", LogType.Error);
            });
        }
    }

    private async void OnNfcError(object? sender, NfcErrorEventArgs e)
    {
        await MainThread.InvokeOnMainThreadAsync(() =>
        {
            StatusMessage = $"‚ùå NFC Hatasƒ±: {e.ErrorMessage}";
            IsReading = false;
            AddLog($"NFC hatasƒ±: {e.ErrorMessage}", LogType.Error);
        });
    }

    private void AddLog(string message, LogType type)
    {
        var logEntry = new NfcLogEntry
        {
            Timestamp = DateTime.Now,
            Message = message,
            Type = type
        };

        // UI thread'de √ßalƒ±≈ütƒ±r
        MainThread.BeginInvokeOnMainThread(() =>
        {
            NfcLogs.Insert(0, logEntry);
            
            // En fazla 100 log tutma
            while (NfcLogs.Count > 100)
            {
                NfcLogs.RemoveAt(NfcLogs.Count - 1);
            }
        });
    }

    public void Dispose()
    {
        _nfcService.NfcDataReceived -= OnNfcDataReceived;
        _nfcService.NfcError -= OnNfcError;
    }
}

public class NfcLogEntry
{
    public DateTime Timestamp { get; set; }
    public string Message { get; set; } = string.Empty;
    public LogType Type { get; set; }
    public string FormattedTime => Timestamp.ToString("HH:mm:ss");
    public string TypeIcon => Type switch
    {
        LogType.Info => "‚ÑπÔ∏è",
        LogType.Success => "‚úÖ",
        LogType.Warning => "‚ö†Ô∏è",
        LogType.Error => "‚ùå",
        _ => "üìù"
    };
}

public enum LogType
{
    Info,
    Success,
    Warning,
    Error
}
